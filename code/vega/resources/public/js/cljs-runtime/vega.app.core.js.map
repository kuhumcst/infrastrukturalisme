{"version":3,"sources":["vega/app/core.cljs"],"mappings":"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","names":["vega.app.core/timeline","vega.app.core/new-data","vega.app.core/string->json","string","js/JSON","vega.app.core/json->map","json","keywordize-keys?","cljs.core.js__GT_clj","vega.app.core/spec","vega.app.core/data-set","vega.app.core/year?","cljs.spec.alpha/and-spec-impl","p1__43965#","p1__43966#","cljs.core/number?","vega.app.core/height?","p1__43967#","p1__43968#","vega.app.core/valid-colors","vega.app.core/valid-symbols","cljs.spec.alpha/def-impl","cljs.core/string?","cljs.spec.alpha.every_impl","G__43969","cljs.core/coll?","cljs.spec.alpha/map-spec-impl","G__43970","cljs.core/map?","cljs.core/contains?","vega.app.core/change-range","vega-spec","start-year","end-year","cljs.spec.alpha.valid_QMARK_","cljs.core/assoc-in","vega.app.core/change-range-step","step","year","vega.app.core/change-dataset","dataset","cljs.core.update_in","cljs.core/dissoc","vega.app.core/change-height","height","vega.app.core/change-color","scheme","vega.app.core/change-symbol","symbol","vega.app.core/spec-component","oz.core.vega","vega.app.core/app","vega.app.core/root","js/document.getElementById","vega.app.core/render","reagent.dom.render","vega.app.core/init"],"sourcesContent":["(ns vega.app.core\r\n  (:require [reagent.dom :as d]\r\n            [shadow.resource :as resource]\r\n            [clojure.spec.alpha :as s]\r\n            [oz.core :as oz]))\r\n\r\n;; the vega timeline spec read in as a string\r\n(def\r\n  timeline (resource/inline \"spec/timeline.json\"))\r\n\r\n;; some testdata to test out change-dataset func, read in as a string\r\n(def\r\n  new-data (resource/inline \"spec/testData.json\"))\r\n\r\n(defn string->json [string]\r\n  \"Turning a string into JS JSON format\"\r\n  (.parse js/JSON string))\r\n\r\n(defn json->map\r\n  [json keywordize-keys?]\r\n  \"Turning a JS JSON format into a map, keywordize keys true or false\"\r\n  (js->clj json :keywordize-keys keywordize-keys?))\r\n\r\n;; turning the timeline into a clojure map with keys as keywords\r\n(def spec\r\n  (->\r\n    (string->json timeline)\r\n    (json->map true)))\r\n\r\n;; turning the testdata into a clojure map with keys as keywords\r\n(def data-set\r\n  (->\r\n    (string->json new-data)\r\n    (json->map true)))\r\n\r\n;; validating years in initRange to be between 1881-2019\r\n(def year?\r\n  (s/and number? #(> % 1880) #(< % 2020)))\r\n\r\n;; validating the height of the timeline to be between 100-1200, smaller or heighter would nok look good.\r\n(def height?\r\n  (s/and number? #(>= % 100) #(<= % 1200)))\r\n\r\n;; valid colors in vega doc\r\n(def valid-colors #{\"accent\" \"category10\" \"category20\" \"category20b\" \"category20c\" \"dark2\" \"paired\" \"pastel1\" \"pastel2\" \"set1\" \"set2\" \"set3\" \"tableau10\" \"tableau20\"})\r\n\r\n;; valid symbols in vega doc\r\n(def valid-symbols #{\"circle\" \"square\" \"cross\" \"diamond\" \"triangle-up\" \"triangle-down\" \"triangle-right\" \"triangle-left\" \"stroke\" \"arrow\" \"wedge\" \"triangle\"})\r\n\r\n\r\n(s/def ::Startdato string?) ; might be a good idea to do a reqex check here too: dddd-dd-dd\r\n(s/def ::Slutdato string?) ; might be a good idea to do a reqex check here too: dddd-dd-dd\r\n(s/def ::Kategori string?)\r\n\r\n(s/def ::dataset (s/coll-of ::data))\r\n(s/def ::data (s/keys :req-un [::Startdato ::Slutdato ::Kategori] ; these keys need to be in the data in order for the timeline to work\r\n                      :opt-un [::Event ::Tooltip])) ; these keys should be in the data in order to show tooltips or text\r\n\r\n\r\n\r\n(defn change-range\r\n  [vega-spec start-year end-year]\r\n  \"Changing the range start and end year\"\r\n  (if (and (s/valid? year? start-year) (s/valid? year? end-year))\r\n   (assoc-in vega-spec [:data 1 :values] [{:initRange (str start-year \"-01-01\")} {:initRange (str end-year \"-01-01\")}])))\r\n  ;; (throw \"some kind of error handling here\")) ; for when start and end are not a valid year according to year?\r\n\r\n\r\n(defn change-range-step\r\n  [vega-spec step]\r\n  \"Changing the width of the range in years, starting from year 1930\"\r\n  (if (pos? step)\r\n    (let [year (+ 1930 step)]\r\n     (assoc-in vega-spec [:data 1 :values 1 :initRange] (str year \"-01-01\")))))\r\n  ;; (throw \"some kind of error handling here\")))\r\n\r\n\r\n(defn change-dataset\r\n  [vega-spec dataset]\r\n  \"Changing the dataset as in-line data values\"\r\n  (if (s/valid? ::dataset dataset)\r\n      (->\r\n        (update-in vega-spec [:data 0] dissoc :url)\r\n        (assoc-in [:data 0 :values] dataset))))\r\n;; (throw \"some kind of error handling here\"))\r\n\r\n\r\n\r\n(defn change-height\r\n  [vega-spec height]\r\n  \"Changing the height\"\r\n  (if (s/valid? height? height)\r\n    (assoc-in vega-spec [:height] height)))\r\n    ;; (throw \"some kind of error handling here\")))\r\n\r\n\r\n(defn change-color\r\n  [vega-spec scheme]\r\n  \"Changing the color of the legend based on a vega scheme\"\r\n  (if (contains? valid-colors scheme)\r\n    (assoc-in vega-spec [:scales 2 :range] {:scheme scheme})))\r\n    ;; (throw \"some kind of error handling here\")))\r\n\r\n\r\n(defn change-symbol\r\n  [vega-spec symbol]\r\n  \"Changing the shape of the symbol\"\r\n  (if (contains? valid-symbols symbol)\r\n    (assoc-in vega-spec [:marks 2 :encode :update :shape] {:value symbol})))\r\n;; (throw \"some kind of error handling here\")))\r\n\r\n\r\n\r\n(defn spec-component\r\n  [vega-spec]\r\n  \"Component for vega spec using Oz\"\r\n  (oz/vega vega-spec {:mode \"vega\"}))\r\n\r\n\r\n\r\n\r\n\r\n\r\n(defn app []\r\n  [spec-component spec])\r\n\r\n\r\n(def root\r\n  (js/document.getElementById \"app\"))\r\n\r\n(defn ^:dev/after-load render []\r\n  (d/render [app] root))\r\n\r\n\r\n(defn init []\r\n  (render))\r\n"]}